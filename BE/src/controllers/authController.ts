import { Request, Response } from 'express';
import User, { IUser } from '../models/UserModel.js';
import bcrypt from 'bcrypt'; // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
import dotenv from 'dotenv';
import { sendResetPasswordEmail } from '../utils/mailer.js';
import {
  generateToken,
  generateResetToken,
  verifyResetToken,
} from '../config/jwt.js';

dotenv.config();

// =================== REGISTER ===================
export const registerUser = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { username, email, password, fullName } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ (email –∏–ª–∏ username)
    // –±—ã–ª–æ:
    // const existingUser = await User.findOne({ email });
    //     if (existingUser) {
    //        res.status(400).json({ message: "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" });
    //        return;
    //     }

    //     const existingUserName = await User.findOne({ username });
    //     if (existingUserName) {
    //        res.status(400).json({ message: "Username —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" });
    //        return;
    //     }
    const existing = await User.findOne({ $or: [{ email }, { username }] });
    if (existing) {
      const errors: Record<string, string> = {};
      if (existing.email === email) errors.email = 'Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è';
      if (existing.username === username)
        errors.username = 'Username —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è';
      res.status(400).json({ errors });
      return;
    }

    // NOTE: –≤ –º–æ–¥–µ–ª–∏ User –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å pre('save') –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è.
    const newUser = new User({ username, email, password, fullName });
    await newUser.save();

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω (–≤ —Ç–µ–ª–µ –æ—Ç–≤–µ—Ç–∞ ‚Äî —Ç.–∫. —Ç—ã —Ö–æ—á–µ—à—å —Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage)
    const token = generateToken(newUser);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø–∞—Ä–æ–ª—è)//–¥–æ–±–∞–≤–ª–µ–Ω–æ
    const userPublic = {
      _id: newUser._id,
      username: newUser.username,
      email: newUser.email,
      fullName: newUser.fullName,
      profileImage: newUser.profileImage || '',
    };

    res.status(201).json({ token, user: userPublic });
  } catch (err: unknown) {
    const error = err as Error;
    res.status(500).json({
      message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      error: error.message,
    });
  }
};

// =================== LOGIN ===================
export const loginUser = async (req: Request, res: Response): Promise<void> => {
  try {
    //—á—Ç–æ–±—ã –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ –∏–Ω–ø—É—Ç ‚ÄúUsername or email‚Äù ‚Üí –ø–æ–ª–µ emailOrUsername
    // const { email, password } = req.body;
    // const user = (await User.findOne({ email })) as IUser | null; // –≤–º–µ—Å—Ç–æ any ‚Üí IUser
    const { emailOrUsername, password } = req.body as {
      emailOrUsername: string;
      password: string;
    };
    const user = await User.findOne({
  $or: [{ email: emailOrUsername }, { username: emailOrUsername }],
}).select('+password'); //–ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –ø–æ—Å—Ç–º–∞–Ω–Ω –ø—Ä–æ –ø–∞—Ä–æ–ª—å –ø—Ä–∏ put

    if (!user) {
      res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
      return;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏ comparePassword, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å; –∏–Ω–∞—á–µ bcrypt.compare
    // (–≤ –º–æ–¥–µ–ª–∏ –º—ã –¥–æ–±–∞–≤–∏–ª–∏ userSchema.methods.comparePassword)
    // —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏

    //–±—ã–ª–æ
    // const isMatch = await bcrypt.compare(password, user.password);
    // const isMatch =
    //   typeof (user as any).comparePassword === 'function'
    //     ? await (user as any).comparePassword(password)
    //     : await bcrypt.compare(password, user.password);

    // –ø–µ—Ä–µ–Ω–æ—Å–∏–º –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è –≤ –º–æ–¥–µ–ª—å
    const isMatch = await user.comparePassword(password);

    if (!isMatch) {
      res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
      return;
    }

    const token = generateToken(user);

    const userPublic = {
      _id: user._id,
      username: user.username,
      email: user.email,
      fullName: user.fullName,
      profileImage: user.profileImage || '',
    };

    res.status(200).json({ token, user: userPublic });
  } catch (err: unknown) {
    const error = err as Error;
    res
      .status(500)
      .json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ', error: error.message });
  }
};

// =================== REQUEST RESET(FORGOT password)  ===================
export const requestPasswordReset = async (req: Request, res: Response) => {
  try {
    const { email } = req.body;
    if (!email) return res.status(400).json({ message: 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    const user = await User.findOne({ email });
    if (!user) {
      // –ù–µ –¥–∞—ë–º –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –Ω–∞–ª–∏—á–∏–∏ email? –ó–¥–µ—Å—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 400, –Ω–æ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å 200 (–±–µ–∑ —É—Ç–µ—á–∫–∏).
      return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const token = generateResetToken(user._id.toString());

    // –ú–ò–ù–ò-–¥–æ–±–∞–≤–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –≤ DEV
    if (process.env.NODE_ENV !== 'production') {
      console.log('[DEV] reset token:', token);
      // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≥–æ—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞
      // console.log(`[DEV] reset link: http://localhost:3001/reset-password?token=${token}`);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ ‚Äî –≤ prod –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ
    await sendResetPasswordEmail(email, token);

    // console.log("token: ", token)
// üîπ –ú–ò–ù–ò-–¥–æ–±–∞–≤–∫–∞: –≤ DEV –æ—Ç–¥–∞–µ–º —Ç–æ–∫–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ (—á—Ç–æ–±—ã —É–¥–æ–±–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ Postman)
    if (process.env.NODE_ENV !== 'production') {
      return res.json({
        message: '–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ email',
        token,
      });
    }

    // PROD-–æ—Ç–≤–µ—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    res.json({ message: '–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ email' });
  } catch (err: unknown) {
    const error = err as Error;
    res.status(500).json({
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è',
      error: error.message,
    });
  }
};



//     // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å token (—É–¥–∞–ª–∏—Ç—å –≤ –ø—Ä–æ–¥–µ)
//     res.json({
//       message: '–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ email' /*, token */,
//     });
//   } catch (err: unknown) {
//     const error = err as Error;
//     res.status(500).json({
//       message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è',
//       error: error.message,
//     });
//   }
// };

// =================== RESET PASSWORD ===================
export const resetPassword = async (req: Request, res: Response) => {
  try {
    const { token, newPassword } = req.body;
    if (!token || !newPassword)
      return res.status(400).json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö' });

    // –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —Å–±—Ä–æ—Å–∞
    const decoded = verifyResetToken(token) as { id: string } | null;
    if (!decoded || !decoded.id) {
      return res
        .status(400)
        .json({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω' });
    }

    const user = await User.findById<IUser>(decoded.id); //–¥–∂–µ–Ω–µ—Ä–∏–∫
    if (!user) {
      res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }
    // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å ‚Äî pre('save') –≤ –º–æ–¥–µ–ª–∏ —Ö–µ—à–∏—Ä—É–µ—Ç –µ–≥–æ
    user.password = newPassword;
    await user.save();

    res.json({ message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω' });
  } catch (err: unknown) {
    const error = err as Error;
    res
      .status(500)
      .json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞—Ä–æ–ª—è', error: error.message });
  }
};
