import { Request, Response } from 'express';
import { Types } from 'mongoose'; //—á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å ObjectId –¥–ª—è Mongo
import multer from 'multer'; //–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤.
import Post, { IPost } from '../models/PostModel';
import User from '../models/UserModel';
import { RequestWithUser } from '../middlewares/authMiddleware'; //—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ (—Å req.user).
import { uploadToS3 } from '../config/s3'; //—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ Amazon S3

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è multer (–ø–∞–º—è—Ç—å, –ø–æ—Ç–æ–º ‚Üí S3)
const storage = multer.memoryStorage();
export const upload = multer({
  storage,
  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB
});
//upload –ø–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–∞—Ä—à—Ä—É—Ç–∞—Ö (upload.single("image")

/* üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã */
export const getAllPosts = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const posts = await Post.find() //–¥–æ—Å—Ç–∞—ë–º –≤—Å–µ –ø–æ—Å—Ç—ã –∏–∑ –±–∞–∑—ã
      .populate('author', 'username profile_image') //–≤–º–µ—Å—Ç–æ author: ObjectId –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–∏–º—è + —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è)
      .sort({ createdAt: -1 }); //–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
    res.json(posts); //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
  } catch (err: unknown) {
    const error = err as Error;
    res
      .status(500)
      .json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤', error: error.message });
  }
};

/* üîπ –ü–æ—Å—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
export const getUserPosts = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { userId } = req.params; //–∏–∑ URL (/posts/user/:userId)

    const user = await User.findById(userId).populate('posts'); //–ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –∏ —Å—Ä–∞–∑—É –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –µ–≥–æ posts —á–µ—Ä–µ–∑ populate
    if (!user) {
      res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }

    res.json(user.posts);
  } catch (err: unknown) {
    const error = err as Error;
    res
      .status(500)
      .json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–æ–≤', error: error.message });
  }
};

/* üîπ –ü–æ—Å—Ç –ø–æ ID */
export const getPostById = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const post = await Post.findById(req.params.id).populate(
      'author',
      'username profile_image'
    );
    if (!post) {
      res.status(404).json({ message: '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }
    res.json(post);
  } catch (err: unknown) {
    const error = err as Error;
    res
      .status(500)
      .json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞', error: error.message });
  }
};

/*üîπ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ */
export const createPost = async (
  req: RequestWithUser,
  res: Response
): Promise<void> => {
  try {
    //–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (req.user.id)
    if (!req.user?.id) {
      res.status(401).json({ message: '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' });
      return;
    }
    //–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω
    if (!req.file) {
      res.status(400).json({ message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
      return;
    }

    const imageUrl = await uploadToS3(req.file, 'posts'); //–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ S3 ‚Üí –ø–æ–ª—É—á–∞–µ–º imageUrl

    //–°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π Post
    const newPost: IPost = new Post({
      author: new Types.ObjectId(req.user.id),
      image: imageUrl,
      description: req.body.description || '',
      // createdAt: new Date(),
    });

    await newPost.save(); //–°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –±–∞–∑–µ

    await User.findByIdAndUpdate(req.user.id, {
      $push: { posts: newPost._id },
    }); //–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º User: –¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ posts ID –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞

    res.status(201).json(newPost);
  } catch (err: unknown) {
    const error = err as Error;
    res
      .status(500)
      .json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞', error: error.message });
  }
};

// // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Ñ–æ—Ç–æ –≤ S3
// export const createPost = async (req: RequestWithUser, res: Response) => {
//   try {
//     const userId = req.user?.id;
//     if (!userId) return res.status(401).json({ message: "Unauthorized" });

//     if (!req.file) return res.status(400).json({ message: "Image required" });

//     const imageUrl = await uploadToS3(req.file, "posts");

//     const user = await User.findById(userId);
//     if (!user) return res.status(404).json({ message: "User not found" });

//     const post = new Post({
//       user_id: user._id,
//       image_url: imageUrl, 
//       user_name: user.username,
//       profile_image: user.profile_image,
//       caption: req.body.caption,
//       created_at: new Date(),
//     });



/*üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ */
export const updatePost = async (
  req: RequestWithUser,
  res: Response
): Promise<void> => {
  try {
    if (!req.user?.id) {
      res.status(401).json({ message: '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' });
      return;
    }

    const post = await Post.findById(req.params.id);
    if (!post) {
      res.status(404).json({ message: '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }

    //–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å = –∞–≤—Ç–æ—Ä –ø–æ—Å—Ç–∞
    if (post.author.toString() !== req.user.id) {
      res.status(403).json({ message: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' });
      return;
    }
    //–ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ ‚Üí –æ–±–Ω–æ–≤–ª—è–µ–º.
    if (req.body.description) post.description = req.body.description;
    //–ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Üí –∑–∞–≥—Ä—É–∂–∞–µ–º –≤ S3 –∏ –º–µ–Ω—è–µ–º —Å—Å—ã–ª–∫—É
    if (req.file) {
      const imageUrl = await uploadToS3(req.file, 'posts');
      post.image = imageUrl;
    }

    await post.save();
    res.json(post);
  } catch (err: unknown) {
    const error = err as Error;
    res
      .status(500)
      .json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞', error: error.message });
  }
};

/*üîπ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ */
export const deletePost = async (
  req: RequestWithUser,
  res: Response
): Promise<void> => {
  try {
    if (!req.user?.id) {
      res.status(401).json({ message: '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' });
      return;
    }

    const post = await Post.findById(req.params.id);
    if (!post) {
      res.status(404).json({ message: '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      return;
    }
    //–∞–≤—Ç–æ—Ä = —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (post.author.toString() !== req.user.id) {
      res.status(403).json({ message: '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è' });
      return;
    }

    await post.deleteOne();
    await User.findByIdAndUpdate(req.user.id, { $pull: { posts: post._id } });

    res.json({ message: '–ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω' });
  } catch (err: unknown) {
    const error = err as Error;
    res
      .status(500)
      .json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞', error: error.message });
  }
};

/*üîπ Explore (—Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ—Å—Ç—ã) */
export const explorePosts = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const postCount = await Post.countDocuments();
    if (postCount === 0) {
      res.json({ message: '–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
      return;
    }

    const sampleSize = postCount < 10 ? postCount : 10;
    //–í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ 10 –ø–æ—Å—Ç–æ–≤($sample)
    const posts = await Post.aggregate([{ $sample: { size: sampleSize } }])
      .lookup({
        //–ø–æ–¥–∫–ª—é—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö (–∞–≤—Ç–æ—Ä–∞—Ö)
        from: 'users',
        localField: 'author',
        foreignField: '_id',
        as: 'author',
      })
      .unwind({ path: '$author', preserveNullAndEmptyArrays: true }) //—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –∞–≤—Ç–æ—Ä–æ–≤
      .project({
        //–±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
        image: 1,
        description: 1,
        createdAt: 1,
        'author.username': 1,
        'author.profile_image': 1,
        likes: 1,
        comments: 1,
      });

    res.json(posts);
  } catch (err: unknown) {
    const error = err as Error;
    res
      .status(500)
      .json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ explore-–ø–æ—Å—Ç–∞—Ö', error: error.message });
  }
};
