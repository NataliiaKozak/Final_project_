{"version":3,"file":"UserModel.js","sourceRoot":"","sources":["../../../src/models/UserModel.ts"],"names":[],"mappings":"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","sourcesContent":["import mongoose, { Schema, Document, Types } from 'mongoose';\r\nimport bcrypt from 'bcrypt';\r\nimport { IPost } from './PostModel'; //  чтобы типизировать posts виртуально\r\n\r\nexport interface IUser extends Document {\r\n  _id: Types.ObjectId;\r\n  username: string;\r\n  email: string;\r\n  password: string;\r\n  fullName: string;\r\n  bio?: string;\r\n  profileImage?: string; //переименовано\r\n  website?: string;\r\n  // posts?: Types.ObjectId[]; // или IPost[]\r\n  posts?: IPost[];\r\n  followers: Types.ObjectId[];\r\n  following: Types.ObjectId[];\r\n  comparePassword(candidatePassword: string): Promise<boolean>;\r\n  followersCount?: number;\r\n  followingCount?: number;\r\n}\r\n\r\nconst UserSchema = new Schema<IUser>(\r\n  {\r\n    username: { type: String, required: true, unique: true },\r\n    email: { type: String, required: true, unique: true, lowercase: true },\r\n    password: { type: String, required: true, select: false }, //пароль не выбираем по умолчанию, после проверки в постман\r\n    fullName: { type: String, required: true },\r\n    bio: { type: String, default: '', maxlength: 150 },\r\n    profileImage: { type: String, default: '' },\r\n    website: { type: String, default: '' },\r\n    followers: [{ type: Schema.Types.ObjectId, ref: 'User', default: [] }],\r\n    following: [{ type: Schema.Types.ObjectId, ref: 'User', default: [] }],\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\n// Хэширование пароля\r\nUserSchema.pre('save', async function (next) {\r\n  const user = this as IUser;\r\n  if (!user.isModified('password')) return next();\r\n\r\n  try {\r\n    const salt = await bcrypt.genSalt(10);\r\n    user.password = await bcrypt.hash(user.password, salt);\r\n    next();\r\n  } catch (err) {\r\n    next(err as Error);\r\n  }\r\n});\r\n\r\n// Сравнение паролей\r\nUserSchema.methods.comparePassword = async function (\r\n  candidatePassword: string\r\n): Promise<boolean> {\r\n  return bcrypt.compare(candidatePassword, this.password);\r\n};\r\n\r\n// Виртуальные поля\r\nUserSchema.virtual('posts', {\r\n  ref: 'Post', // модель, с которой связываем\r\n  localField: '_id', // поле в User\r\n  foreignField: 'author', // поле в Post\r\n});\r\n\r\nUserSchema.virtual('followersCount').get(function (this: IUser) {\r\n  // return this.followers.length;чтобы  не упасть на length, устойчиво к undefined. Постман: список постов\r\n  return (this.followers ?? []).length;\r\n});\r\n\r\nUserSchema.virtual('followingCount').get(function (this: IUser) {\r\n  // return this.following.length;чтобы  не упасть на length, устойчиво к undefined. \r\n  return (this.following ?? []).length;\r\n});\r\n\r\n// чтобы virtual попадали в JSON\r\nUserSchema.set('toJSON', {\r\n  virtuals: true,\r\n  versionKey: false,\r\n  transform: (_doc, ret) => {\r\n    // ret.id = String(ret._id);\r\n    delete ret.id; // ← убираем _id\r\n    return ret;\r\n  },\r\n});\r\nUserSchema.set('toObject', { virtuals: true });\r\n\r\nexport default mongoose.model<IUser>('User', UserSchema);\r\n\r\n// const User = mongoose.model<IUser>(\"User\", UserSchema);\r\n// Здесь IUser передаётся как дженерик в mongoose.model<IUser>.\r\n// Это нужно, чтобы связать твой интерфейс (TypeScript) с тем, что хранится в MongoDB.\r\n// \"типизированный контракт\" между MongoDB и твоим TypeScript-кодом\r\n"]}