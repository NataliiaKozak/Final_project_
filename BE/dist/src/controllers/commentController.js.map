{"version":3,"file":"commentController.js","sourceRoot":"","sources":["../../../src/controllers/commentController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from 'express';\r\nimport Comment from '../models/CommentModel.js';\r\nimport Post from '../models/PostModel.js';\r\nimport { RequestWithUser } from '../middlewares/authMiddleware.js';\r\nimport { createNotification } from './notificationController.js';\r\n\r\n// ===============Добавить комментарий========================\r\nexport const addComment = async (\r\n  req: RequestWithUser,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const { postId } = req.params;\r\n    const { text } = req.body;\r\n    const userId = req.user?.id;\r\n\r\n    if (!userId) {\r\n      res.status(401).json({ message: 'Требуется авторизация' });\r\n      return;\r\n    }\r\n\r\n    if (!text) {\r\n      res.status(400).json({ message: 'Комментарий не может быть пустым' });\r\n      return;\r\n    }\r\n\r\n    const post = await Post.findById(postId).populate(\r\n      'author',\r\n      '_id username profile_image'\r\n    );\r\n\r\n    if (!post) {\r\n      res.status(404).json({ message: 'Пост не найден' });\r\n      return;\r\n    }\r\n\r\n    const comment = new Comment({\r\n      user: userId,\r\n      post: post._id,\r\n      text,\r\n      // author: post.author?._id // только user, без author\r\n    });\r\n\r\n    await comment.save();\r\n\r\n    // =================Уведомление автору поста===============\r\n    if (post.author && post.author._id.toString() !== userId) {\r\n      await createNotification(\r\n        post.author._id,\r\n        userId,\r\n        'commented_post',\r\n        post._id,\r\n        comment._id\r\n      );\r\n    }\r\n\r\n    await comment.populate('user', 'username profile_image');\r\n    res.json({ message: 'Комментарий добавлен', comment });\r\n  } catch (error) {\r\n    console.error('Ошибка при добавлении комментария:', error);\r\n    res.status(500).json({ message: 'Ошибка при добавлении комментария' });\r\n  }\r\n};\r\n\r\n// ====================Удалить комментарий====================\r\nexport const deleteComment = async (\r\n  req: RequestWithUser,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const { commentId } = req.params;\r\n    const userId = req.user?.id;\r\n\r\n    const comment = await Comment.findById(commentId);\r\n    if (!comment) {\r\n      res.status(404).json({ message: 'Комментарий не найден' });\r\n      return;\r\n    }\r\n\r\n    // проверяем только владельца комментария\r\n    if (\r\n      comment.user.toString() !== userId\r\n      // comment.user.toString() !== userId\r\n      // && comment.author?.toString() !== userId\r\n    ) {\r\n      res.status(403).json({ message: 'Нет прав для удаления' });\r\n      return;\r\n    }\r\n\r\n    await comment.deleteOne();\r\n    res.json({ message: 'Комментарий удалён' });\r\n  } catch (error) {\r\n    console.error('Ошибка при удалении комментария:', error);\r\n    res.status(500).json({ message: 'Ошибка при удалении комментария' });\r\n  }\r\n};\r\n\r\n// ==================Получить комментарии к посту========================\r\nexport const getPostComments = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const { postId } = req.params;\r\n    const comments = await Comment.find({ post: postId })\r\n      .populate('user', 'username profile_image');\r\n      // .populate('author', 'username profile_image');\r\n\r\n    res.json(comments);\r\n  } catch (error) {\r\n    console.error('Ошибка при получении комментариев:', error);\r\n    res.status(500).json({ message: 'Ошибка при получении комментариев' });\r\n  }\r\n};\r\n"]}