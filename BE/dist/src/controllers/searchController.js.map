{"version":3,"file":"searchController.js","sourceRoot":"","sources":["../../../src/controllers/searchController.ts"],"names":[],"mappings":"AAAA,+CAA+C;AAC/C,6CAA6C;AA6B7C,OAAO,IAAI,MAAM,wBAAwB,CAAC;AAE1C,SAAS,YAAY,CAAC,CAAS;IAC7B,OAAO,CAAC,CAAC,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;AAClD,CAAC;AAED,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,EAC9B,GAAY,EACZ,GAAa,EACE,EAAE;IACjB,IAAI,CAAC;QACH,mCAAmC;QACnC,MAAM,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC;QAC5B,kEAAkE;QAClE,MAAM,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,IAAI,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;QAChD,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC;YACd,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,6BAA6B,EAAE,CAAC,CAAC;YACjE,OAAO;QACT,CAAC;QAED,oEAAoE;QACpE,MAAM,EAAE,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;QAEnD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC;YAC5B,GAAG,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,EAAE,CAAC;SAClE,CAAC;aACC,MAAM,CAAC,oCAAoC,CAAC;aAC5C,KAAK,CAAC,EAAE,CAAC;aACT,IAAI,EAAE,CAAC,CAAC,wCAAwC;QAEnD,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClB,CAAC;IAAC,OAAO,KAAU,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,CAAC,sBAAsB,EAAE,KAAK,CAAC,CAAC;QAC7C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YACnB,OAAO,EAAE,iCAAiC;YAC1C,8CAA8C;YAC9C,KAAK,EAAE,KAAK,EAAE,OAAO;SACtB,CAAC,CAAC;IACL,CAAC;AACH,CAAC,CAAC","sourcesContent":["// import { Request, Response } from 'express';\r\n// import User from '../models/UserModel.js';\r\n\r\n// export const searchUsers = async (\r\n//   req: Request,\r\n//   res: Response\r\n// ): Promise<void> => {\r\n//   try {\r\n//     const { query } = req.query;\r\n//     if (!query) {\r\n//       res.status(400).json({ message: 'Запрос не может быть пустым' });\r\n//       return;\r\n//     }\r\n\r\n//     const users = await User.find({\r\n//       $or: [\r\n//         { username: { $regex: query, $options: 'i' } },\r\n//         { fullName: { $regex: query, $options: 'i' } },\r\n//       ],\r\n//     }).select('username fullName profileImage');\r\n//     // .limit(20); //можно добавить\r\n\r\n//     res.json(users);\r\n//     console.log('[ctrl] searchUsers hit', req.query);\r\n//   } catch (error) {\r\n//     res.status(500).json({ message: 'Ошибка при поиске пользователей' });\r\n//   }\r\n// };\r\n\r\nimport { Request, Response } from 'express';\r\nimport User from '../models/UserModel.js';\r\n\r\nfunction escapeRegExp(s: string) {\r\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\r\n}\r\n\r\nexport const searchUsers = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    // Забираем query строго как строку\r\n    const raw = req.query.query;\r\n    // const q = Array.isArray(raw) ? raw[0] : raw ? String(raw) : \"\";\r\n    const q = String(req.query?.query ?? '').trim();\r\n    if (!q.trim()) {\r\n      res.status(400).json({ message: 'Запрос не может быть пустым' });\r\n      return;\r\n    }\r\n\r\n    // Экраним спецсимволы, чтобы не ловить \"Invalid regular expression\"\r\n    const rx = new RegExp(escapeRegExp(q.trim()), 'i');\r\n\r\n    const users = await User.find({\r\n      $or: [{ username: { $regex: rx } }, { fullName: { $regex: rx } }],\r\n    })\r\n      .select('_id username fullName profileImage')\r\n      .limit(20)\r\n      .lean(); // быстрее, без лишних Mongoose-объектов\r\n\r\n    res.json(users);\r\n  } catch (error: any) {\r\n    console.error('[searchUsers] error:', error);\r\n    res.status(500).json({\r\n      message: 'Ошибка при поиске пользователей',\r\n      // во время разработки полезно видеть причину:\r\n      error: error?.message,\r\n    });\r\n  }\r\n};\r\n"]}