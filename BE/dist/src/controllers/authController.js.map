{"version":3,"file":"authController.js","sourceRoot":"","sources":["../../../src/controllers/authController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from 'express';\r\nimport User, { IUser } from '../models/UserModel.js';\r\nimport bcrypt from 'bcrypt'; // используется только для проверки, если нужно (опционально)\r\nimport dotenv from 'dotenv';\r\nimport { sendResetPasswordEmail } from '../utils/mailer.js';\r\nimport {\r\n  generateToken,\r\n  generateResetToken,\r\n  verifyResetToken,\r\n} from '../config/jwt.js';\r\n\r\ndotenv.config();\r\n\r\n// =================== REGISTER ===================\r\nexport const registerUser = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const { username, email, password, fullName } = req.body;\r\n\r\n    // Проверка уникальности (email или username)\r\n    // было:\r\n    // const existingUser = await User.findOne({ email });\r\n    //     if (existingUser) {\r\n    //        res.status(400).json({ message: \"Email уже используется\" });\r\n    //        return;\r\n    //     }\r\n\r\n    //     const existingUserName = await User.findOne({ username });\r\n    //     if (existingUserName) {\r\n    //        res.status(400).json({ message: \"Username уже используется\" });\r\n    //        return;\r\n    //     }\r\n    const existing = await User.findOne({ $or: [{ email }, { username }] });\r\n    if (existing) {\r\n      const errors: Record<string, string> = {};\r\n      if (existing.email === email) errors.email = 'Email уже используется';\r\n      if (existing.username === username)\r\n        errors.username = 'Username уже используется';\r\n      res.status(400).json({ errors });\r\n      return;\r\n    }\r\n\r\n    // NOTE: в модели User должен быть pre('save') для хеширования пароля.\r\n    const newUser = new User({ username, email, password, fullName });\r\n    await newUser.save();\r\n\r\n    // Генерируем токен (в теле ответа — т.к. ты хочешь хранить в localStorage)\r\n    const token = generateToken(newUser);\r\n\r\n    // Возвращаем минимальные данные пользователя (без пароля)//добавлено\r\n    const userPublic = {\r\n      _id: newUser._id,\r\n      username: newUser.username,\r\n      email: newUser.email,\r\n      fullName: newUser.fullName,\r\n      profileImage: newUser.profileImage || '',\r\n    };\r\n\r\n    res.status(201).json({ token, user: userPublic });\r\n  } catch (err: unknown) {\r\n    const error = err as Error;\r\n    res.status(500).json({\r\n      message: 'Ошибка сервера при регистрации',\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n// =================== LOGIN ===================\r\nexport const loginUser = async (req: Request, res: Response): Promise<void> => {\r\n  try {\r\n    //чтобы на фронте инпут “Username or email” → поле emailOrUsername\r\n    // const { email, password } = req.body;\r\n    // const user = (await User.findOne({ email })) as IUser | null; // вместо any → IUser\r\n    const { emailOrUsername, password } = req.body as {\r\n      emailOrUsername: string;\r\n      password: string;\r\n    };\r\n    const user = await User.findOne({\r\n  $or: [{ email: emailOrUsername }, { username: emailOrUsername }],\r\n}).select('+password'); //после проверки в постманн про пароль при put\r\n\r\n    if (!user) {\r\n      res.status(400).json({ message: 'Неверные учетные данные' });\r\n      return;\r\n    }\r\n\r\n    // Используем метод модели comparePassword, если он есть; иначе bcrypt.compare\r\n    // (в модели мы добавили userSchema.methods.comparePassword)\r\n    // теперь можно вызывать метод модели\r\n\r\n    //было\r\n    // const isMatch = await bcrypt.compare(password, user.password);\r\n    // const isMatch =\r\n    //   typeof (user as any).comparePassword === 'function'\r\n    //     ? await (user as any).comparePassword(password)\r\n    //     : await bcrypt.compare(password, user.password);\r\n\r\n    // переносим логику проверки пароля в модель\r\n    const isMatch = await user.comparePassword(password);\r\n\r\n    if (!isMatch) {\r\n      res.status(400).json({ message: 'Неверные учетные данные' });\r\n      return;\r\n    }\r\n\r\n    const token = generateToken(user);\r\n\r\n    const userPublic = {\r\n      _id: user._id,\r\n      username: user.username,\r\n      email: user.email,\r\n      fullName: user.fullName,\r\n      profileImage: user.profileImage || '',\r\n    };\r\n\r\n    res.status(200).json({ token, user: userPublic });\r\n  } catch (err: unknown) {\r\n    const error = err as Error;\r\n    res\r\n      .status(500)\r\n      .json({ message: 'Ошибка сервера при логине', error: error.message });\r\n  }\r\n};\r\n\r\n// =================== REQUEST RESET(FORGOT password)  ===================\r\nexport const requestPasswordReset = async (req: Request, res: Response) => {\r\n  try {\r\n    const { email } = req.body;\r\n    if (!email) return res.status(400).json({ message: 'Email обязателен' });\r\n    const user = await User.findOne({ email });\r\n    if (!user) {\r\n      // Не даём подсказку о наличии email? Здесь возвращаем 400, но можно вернуть 200 (без утечки).\r\n      return res.status(400).json({ message: 'Пользователь не найден' });\r\n    }\r\n\r\n    const token = generateResetToken(user._id.toString());\r\n\r\n    // МИНИ-добавка: показываем токен в DEV\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      console.log('[DEV] reset token:', token);\r\n      // опционально: готовая ссылка для фронта\r\n      // console.log(`[DEV] reset link: http://localhost:5173/reset-password?token=${token}`);\r\n    }\r\n\r\n    // Отправляем письмо — в prod не возвращаем токен в ответе\r\n    await sendResetPasswordEmail(email, token);\r\n\r\n    // console.log(\"token: \", token)\r\n// 🔹 МИНИ-добавка: в DEV отдаем токен в ответе (чтобы удобно скопировать в Postman)\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      return res.json({\r\n        message: 'Ссылка для сброса пароля отправлена на email',\r\n        token,\r\n      });\r\n    }\r\n\r\n    // PROD-ответ без токена\r\n    res.json({ message: 'Ссылка для сброса пароля отправлена на email' });\r\n  } catch (err: unknown) {\r\n    const error = err as Error;\r\n    res.status(500).json({\r\n      message: 'Ошибка при запросе сброса пароля',\r\n      error: error.message,\r\n    });\r\n  }\r\n};\r\n\r\n\r\n\r\n//     // Для разработки можно вернуть token (удалить в проде)\r\n//     res.json({\r\n//       message: 'Ссылка для сброса пароля отправлена на email' /*, token */,\r\n//     });\r\n//   } catch (err: unknown) {\r\n//     const error = err as Error;\r\n//     res.status(500).json({\r\n//       message: 'Ошибка при запросе сброса пароля',\r\n//       error: error.message,\r\n//     });\r\n//   }\r\n// };\r\n\r\n// =================== RESET PASSWORD ===================\r\nexport const resetPassword = async (req: Request, res: Response) => {\r\n  try {\r\n    const { token, newPassword } = req.body;\r\n    if (!token || !newPassword)\r\n      return res.status(400).json({ message: 'Недостаточно данных' });\r\n\r\n    // валидируем токен сброса\r\n    const decoded = verifyResetToken(token) as { id: string } | null;\r\n    if (!decoded || !decoded.id) {\r\n      return res\r\n        .status(400)\r\n        .json({ message: 'Некорректный или просроченный токен' });\r\n    }\r\n\r\n    const user = await User.findById<IUser>(decoded.id); //дженерик\r\n    if (!user) {\r\n      res.status(404).json({ message: 'Пользователь не найден' });\r\n      return;\r\n    }\r\n    // Присваиваем новый пароль — pre('save') в модели хеширует его\r\n    user.password = newPassword;\r\n    await user.save();\r\n\r\n    res.json({ message: 'Пароль успешно обновлён' });\r\n  } catch (err: unknown) {\r\n    const error = err as Error;\r\n    res\r\n      .status(500)\r\n      .json({ message: 'Ошибка при сбросе пароля', error: error.message });\r\n  }\r\n};\r\n"]}