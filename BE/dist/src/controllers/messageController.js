// import { Request, Response } from "express";
// import Message from "../models/MessageModel";
// import { RequestWithUser } from "../middlewares/authMiddleware";
import Message from "../models/MessageModel.js";
// üîπ –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
export const getMessages = async (req, res) => {
    try {
        const { userId } = req.params; // –≤—Ç–æ—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫
        const currentUserId = req.user?.id; // —Ç–µ–∫—É—â–∏–π (–∏–∑ —Ç–æ–∫–µ–Ω–∞)
        if (!currentUserId) {
            res.status(401).json({ message: "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" });
            return;
        }
        const messages = await Message.find({
            $or: [
                { sender: currentUserId, recipient: userId },
                { sender: userId, recipient: currentUserId },
            ],
        })
            .sort({ createdAt: 1 })
            .populate("sender", "username profile_image")
            .populate("recipient", "username profile_image");
        res.json(messages);
    }
    catch (err) {
        const error = err;
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π", error: error.message });
    }
};
//# sourceMappingURL=messageController.js.map