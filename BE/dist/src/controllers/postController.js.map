{"version":3,"file":"postController.js","sourceRoot":"","sources":["../../../src/controllers/postController.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAC,CAAC,oCAAoC;AACtE,OAAO,MAAM,MAAM,QAAQ,CAAC,CAAC,iCAAiC;AAC9D,OAAO,IAAe,MAAM,wBAAwB,CAAC;AAGrD,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC,CAAC,8CAA8C;AAE5F,4DAA4D;AAC5D,MAAM,OAAO,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC;AACvC,MAAM,CAAC,MAAM,MAAM,GAAG,MAAM,CAAC;IAC3B,OAAO;IACP,MAAM,EAAE,EAAE,QAAQ,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI,EAAE,EAAE,MAAM;CAC9C,CAAC,CAAC;AACH,+DAA+D;AAE/D,iEAAiE;AACjE,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,EAC9B,GAAY,EACZ,GAAa,EACE,EAAE;IACjB,IAAI,CAAC;QACH,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC,iDAAiD;aAC9E,QAAQ,CAAC,QAAQ,EAAE,iCAAiC,CAAC,CAAC,gFAAgF;aACtI,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,cAAc;QAE1C,uEAAuE;QAEvE,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,kCAAkC;IACrD,CAAC;IAAC,OAAO,GAAY,EAAE,CAAC;QACtB,MAAM,KAAK,GAAG,GAAY,CAAC;QAC3B,GAAG;aACA,MAAM,CAAC,GAAG,CAAC;aACX,IAAI,CAAC,EAAE,OAAO,EAAE,6BAA6B,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IAC5E,CAAC;AACH,CAAC,CAAC;AAEF,8EAA8E;AAC9E,MAAM,CAAC,MAAM,YAAY,GAAG,KAAK,EAC/B,GAAY,EACZ,GAAa,EACE,EAAE;IACjB,IAAI,CAAC;QACH,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,gCAAgC;QAE/D,0IAA0I;QAC1I,+GAA+G;QAC/G,+CAA+C;QAC/C,oBAAoB;QACpB,yBAAyB;QACzB,4GAA4G;QAC5G,WAAW;QACX,uHAAuH;QAEvH,sBAAsB;QACtB,qEAAqE;QACrE,gBAAgB;QAChB,QAAQ;QAER,4BAA4B;QAC5B,6BAA6B;QAC7B,kCAAkC;QAClC,UAAU;QACV,qBAAqB;QACrB,iFAAiF;QACjF,MAAM;QACN,KAAK;QAEL,0GAA0G;QAC1G,gGAAgG;QAChG,uGAAuG;QACvG,oFAAoF;QAEpF,mFAAmF;QACnF,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;YAC/C,gDAAgD;aAC/C,MAAM,CAAC,qBAAqB,CAAC,CAAC,4BAA4B;aAC1D,IAAI,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;QAE3B,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YACjC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,2BAA2B,EAAE,CAAC,CAAC;YAC/D,OAAO;QACT,CAAC;QACD,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClB,CAAC;IAAC,OAAO,GAAY,EAAE,CAAC;QACtB,MAAM,KAAK,GAAG,GAAY,CAAC;QAC3B,GAAG;aACA,MAAM,CAAC,GAAG,CAAC;aACX,IAAI,CAAC,EAAE,OAAO,EAAE,6BAA6B,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IAC5E,CAAC;AACH,CAAC,CAAC;AAEF,8EAA8E;AAC9E,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,EAC9B,GAAY,EACZ,GAAa,EACE,EAAE;IACjB,IAAI,CAAC;QACH,4DAA4D;QAC5D,cAAc;QACd,sCAAsC;QACtC,KAAK;QAEL,aAAa;QACb,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC;YAC3C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC,CAAC;YAC3D,OAAO;QACT,CAAC;QACD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;aAC5C,QAAQ,CAAC,QAAQ,EAAE,iCAAiC,CAAC;aACrD,QAAQ,CAAC;YACR,IAAI,EAAE,UAAU;YAChB,QAAQ,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,iCAAiC,EAAE;SACtE,CAAC,CAAC;QACL,6DAA6D;QAC7D,2DAA2D;QAC3D,iFAAiF;QAEjF,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC,CAAC;YACpD,OAAO;QACT,CAAC;QACD,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjB,CAAC;IAAC,OAAO,GAAY,EAAE,CAAC;QACtB,MAAM,KAAK,GAAG,GAAY,CAAC;QAC3B,GAAG;aACA,MAAM,CAAC,GAAG,CAAC;aACX,IAAI,CAAC,EAAE,OAAO,EAAE,4BAA4B,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IAC3E,CAAC;AACH,CAAC,CAAC;AAEF,6EAA6E;AAC7E,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAC7B,GAAoB,EACpB,GAAa,EACE,EAAE;IACjB,IAAI,CAAC;QACH,uDAAuD;QACvD,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC;YAClB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,+BAA+B,EAAE,CAAC,CAAC;YACnE,OAAO;QACT,CAAC;QACD,8BAA8B;QAC9B,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;YACd,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,yBAAyB,EAAE,CAAC,CAAC;YAC7D,OAAO;QACT,CAAC;QAED,8DAA8D;QAC9D,MAAM,WAAW,GAAW,GAAG,CAAC,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC;QAEvD,sCAAsC;QACtC,IAAI,WAAW,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;YAC7B,GAAG;iBACA,MAAM,CAAC,GAAG,CAAC;iBACX,IAAI,CAAC,EAAE,OAAO,EAAE,0CAA0C,EAAE,CAAC,CAAC;YACjE,OAAO;QACT,CAAC;QAED,sBAAsB;QACtB,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,yCAAyC;QAE/F,yEAAyE;QACzE,oBAAoB;QACpB,MAAM,OAAO,GAAU,IAAI,IAAI,CAAC;YAC9B,MAAM,EAAE,IAAI,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YACvC,KAAK,EAAE,QAAQ;YACf,WAAW,EAAE,GAAG,CAAC,IAAI,CAAC,WAAW,IAAI,EAAE;YACvC,yBAAyB;SAC1B,CAAC,CAAC;QAEH,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,sBAAsB;QAE5C,0BAA0B;QAC1B,8CAA8C;QAC9C,mCAAmC;QACnC,+EAA+E;QAE/E,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAChC,CAAC;IAAC,OAAO,GAAY,EAAE,CAAC;QACtB,MAAM,KAAK,GAAG,GAAY,CAAC;QAC3B,GAAG;aACA,MAAM,CAAC,GAAG,CAAC;aACX,IAAI,CAAC,EAAE,OAAO,EAAE,2BAA2B,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IAC1E,CAAC;AACH,CAAC,CAAC;AAEF,0CAA0C;AAC1C,6EAA6E;AAC7E,UAAU;AACV,mCAAmC;AACnC,6EAA6E;AAE7E,iFAAiF;AAEjF,4DAA4D;AAE5D,gDAAgD;AAChD,6EAA6E;AAE7E,8BAA8B;AAC9B,2BAA2B;AAC3B,6BAA6B;AAC7B,kCAAkC;AAClC,2CAA2C;AAC3C,mCAAmC;AACnC,gCAAgC;AAChC,UAAU;AAEV,0EAA0E;AAC1E,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAC7B,GAAoB,EACpB,GAAa,EACE,EAAE;IACjB,IAAI,CAAC;QACH,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC;YAClB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,+BAA+B,EAAE,CAAC,CAAC;YACnE,OAAO;QACT,CAAC;QAED,cAAc;QACd,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC;YAC3C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC,CAAC;YAC3D,OAAO;QACT,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC,CAAC;YACpD,OAAO;QACT,CAAC;QAED,mDAAmD;QACnD,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;YAC3C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,6BAA6B,EAAE,CAAC,CAAC;YACjE,OAAO;QACT,CAAC;QAED,uCAAuC;QACvC,qEAAqE;QAErE,2DAA2D;QAC3D,IAAI,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YACzB,IAAI,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;gBACtC,GAAG;qBACA,MAAM,CAAC,GAAG,CAAC;qBACX,IAAI,CAAC,EAAE,OAAO,EAAE,gDAAgD,EAAE,CAAC,CAAC;gBACvE,OAAO;YACT,CAAC;YACD,IAAI,CAAC,WAAW,GAAG,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;QAC1C,CAAC;QAED,mEAAmE;QACnE,IAAI,GAAG,CAAC,IAAI,EAAE,CAAC;YACb,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YACrD,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC;QACxB,CAAC;QAED,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;QAClB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjB,CAAC;IAAC,OAAO,GAAY,EAAE,CAAC;QACtB,MAAM,KAAK,GAAG,GAAY,CAAC;QAC3B,GAAG;aACA,MAAM,CAAC,GAAG,CAAC;aACX,IAAI,CAAC,EAAE,OAAO,EAAE,6BAA6B,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IAC5E,CAAC;AACH,CAAC,CAAC;AAEF,6EAA6E;AAC7E,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAC7B,GAAoB,EACpB,GAAa,EACE,EAAE;IACjB,IAAI,CAAC;QACH,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,CAAC;YAClB,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,+BAA+B,EAAE,CAAC,CAAC;YACnE,OAAO;QACT,CAAC;QAED,cAAc;QACd,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC;YAC3C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC,CAAC;YAC3D,OAAO;QACT,CAAC;QAED,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC,CAAC;YACpD,OAAO;QACT,CAAC;QACD,8BAA8B;QAC9B,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;YAC3C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC,CAAC;YAC3D,OAAO;QACT,CAAC;QAED,MAAM,IAAI,CAAC,SAAS,EAAE,CAAC;QACvB,uHAAuH;QAEvH,GAAG,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,aAAa,EAAE,CAAC,CAAC;IACvC,CAAC;IAAC,OAAO,GAAY,EAAE,CAAC;QACtB,MAAM,KAAK,GAAG,GAAY,CAAC;QAC3B,GAAG;aACA,MAAM,CAAC,GAAG,CAAC;aACX,IAAI,CAAC,EAAE,OAAO,EAAE,2BAA2B,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IAC1E,CAAC;AACH,CAAC,CAAC;AAEF,4EAA4E;AAC5E,MAAM,CAAC,MAAM,YAAY,GAAG,KAAK,EAC/B,GAAY,EACZ,GAAa,EACE,EAAE;IACjB,IAAI,CAAC;QACH,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC9C,IAAI,SAAS,KAAK,CAAC,EAAE,CAAC;YACpB,GAAG,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,4BAA4B,EAAE,CAAC,CAAC;YACpD,OAAO;QACT,CAAC;QAED,MAAM,UAAU,GAAG,SAAS,GAAG,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC;QACnD,sCAAsC;QAEtC,0DAA0D;QAC1D,uCAAuC;QACvC,uCAAuC;QACvC,iDAAiD;QACjD,KAAK;QACL,cAAc;QACd,oDAAoD;QACpD,qBAAqB;QACrB,4BAA4B;QAC5B,2BAA2B;QAC3B,oBAAoB;QACpB,OAAO;QACP,kGAAkG;QAClG,eAAe;QACf,iCAAiC;QACjC,gBAAgB;QAChB,sBAAsB;QACtB,oBAAoB;QACpB,4BAA4B;QAC5B,iCAAiC;QACjC,gBAAgB;QAChB,mBAAmB;QACnB,QAAQ;QAER,SAAS;QACT,yCAAyC;QACzC,uCAAuC;QACvC,kCAAkC;QAClC,MAAM;QAEN,mBAAmB;QACnB,yFAAyF;QACzF,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC;YACjC,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE;YACjC,EAAE,QAAQ,EAAE,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,EAAE,EAAE,gBAAgB;SACnE,CAAC,CAAC;QAEH,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAClB,CAAC;IAAC,OAAO,GAAY,EAAE,CAAC;QACtB,MAAM,KAAK,GAAG,GAAY,CAAC;QAC3B,GAAG;aACA,MAAM,CAAC,GAAG,CAAC;aACX,IAAI,CAAC,EAAE,OAAO,EAAE,2BAA2B,EAAE,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IAC1E,CAAC;AACH,CAAC,CAAC","sourcesContent":["import { Request, Response } from 'express';\r\nimport { Types } from 'mongoose'; //чтобы создавать ObjectId для Mongo\r\nimport multer from 'multer'; //библиотека для загрузки файлов.\r\nimport Post, { IPost } from '../models/PostModel.js';\r\nimport User from '../models/UserModel.js';\r\nimport { RequestWithUser } from '../middlewares/authMiddleware.js'; //расширенный тип запроса (с req.user).\r\nimport { uploadToS3 } from '../config/s3.js'; //функция для загрузки изображений в Amazon S3\r\n\r\n// Multer storage. Хранилище для multer (память, потом → S3)\r\nconst storage = multer.memoryStorage();\r\nexport const upload = multer({\r\n  storage,\r\n  limits: { fileSize: 5 * 1024 * 1024 }, // 5MB\r\n});\r\n//upload потом используется в маршрутах (upload.single(\"image\")\r\n\r\n/* ==================== Получить все посты ====================*/\r\nexport const getAllPosts = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const posts = await Post.find() //достаём все посты из базы (например, для ленты)\r\n      .populate('author', 'username profileImage fullName') //вместо author: ObjectId подставляем данные о пользователе (имя + фото профиля)\r\n      .sort({ createdAt: -1 }); //новые сверху\r\n\r\n    // Виртуальные поля (likesCount, commentsCount) добавятся автоматически\r\n\r\n    res.json(posts); //Отправляем клиенту список постов\r\n  } catch (err: unknown) {\r\n    const error = err as Error;\r\n    res\r\n      .status(500)\r\n      .json({ message: 'Ошибка при получении постов', error: error.message });\r\n  }\r\n};\r\n\r\n/* =================== Посты конкретного пользователя ===================== */\r\nexport const getUserPosts = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const { userId } = req.params; //из URL /api/posts/user/:userId\r\n\r\n    //     const user = await User.findById(userId).populate('posts'); //Ищем пользователя в базе и сразу подтягиваем его posts через populate\r\n    //     изменение из-за виртуального поля posts в UserModel.ts. Posts теперь берутся через виртуалку в UserModel\r\n    //     const user = await User.findById(userId)\r\n    //       .populate({\r\n    //         path: \"posts\",\r\n    //         populate: { path: \"author\", select: \"username profileImage\" }, // подтянем автора в каждом посте\r\n    //       })\r\n    //       .select(\"username profileImage fullName posts\"); // отдаем только нужное, мы исключаем пароль и ненужные поля\r\n\r\n    //        if (!user) {\r\n    //       res.status(404).json({ message: 'Пользователь не найден' });\r\n    //       return;\r\n    //     }\r\n\r\n    //     res.json(user.posts);\r\n    //   } catch (err: unknown) {\r\n    //     const error = err as Error;\r\n    //     res\r\n    //       .status(500)\r\n    //       .json({ message: 'Ошибка при получении постов', error: error.message });\r\n    //   }\r\n    // };\r\n\r\n    // populate('posts') немного тяжелее по производительности, чем Post.find({ author: userId }), потому что:\r\n    // populate делает два запроса (ищет User, потом Post). // Post.find делает сразу прямой запрос.\r\n    // Если нам нужно вернуть профиль пользователя вместе с постами → лучше использовать populate(\"posts\").\r\n    // Если мы хотим отдельный эндпоинт только для постов → лучше Post.find({ author }).\r\n\r\n    // Ищем посты напрямую по Post (без user.posts, т.к. массива posts нет в UserModel)\r\n    const posts = await Post.find({ author: userId })\r\n      // .populate('author', 'username profileImage')\r\n      .select('_id image createdAt') // только превью для профиля\r\n      .sort({ createdAt: -1 });\r\n\r\n    if (!posts || posts.length === 0) {\r\n      res.status(404).json({ message: 'У пользователя нет постов' });\r\n      return;\r\n    }\r\n    res.json(posts);\r\n  } catch (err: unknown) {\r\n    const error = err as Error;\r\n    res\r\n      .status(500)\r\n      .json({ message: 'Ошибка при получении постов', error: error.message });\r\n  }\r\n};\r\n\r\n/* ================== Пост по ID (детальный просмотр)=======================*/\r\nexport const getPostById = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    // const post = await Post.findById(req.params.id).populate(\r\n    //   'author',\r\n    //   'username fullName profileImage'\r\n    // );\r\n\r\n    //Проверка ID\r\n    if (!Types.ObjectId.isValid(req.params.id)) {\r\n      res.status(400).json({ message: 'Некорректный ID поста' });\r\n      return;\r\n    }\r\n    const post = await Post.findById(req.params.id)\r\n      .populate('author', 'username fullName profileImage')\r\n      .populate({\r\n        path: 'comments',\r\n        populate: { path: 'user', select: 'username fullName profileImage' },\r\n      });\r\n    //при открытии детального экрана поста уже будут автор поста,\r\n    // картинка и описание поста,массив комментариев с авторами\r\n    // виртуальные поля likesCount, commentsCount подтянутся автоматически (виртуалы)\r\n\r\n    if (!post) {\r\n      res.status(404).json({ message: 'Пост не найден' });\r\n      return;\r\n    }\r\n    res.json(post);\r\n  } catch (err: unknown) {\r\n    const error = err as Error;\r\n    res\r\n      .status(500)\r\n      .json({ message: 'Ошибка при получении поста', error: error.message });\r\n  }\r\n};\r\n\r\n/*=================== Создание поста ======================================*/\r\nexport const createPost = async (\r\n  req: RequestWithUser,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    //Проверяем, что пользователь авторизован (req.user.id)\r\n    if (!req.user?.id) {\r\n      res.status(401).json({ message: 'Неавторизованный пользователь' });\r\n      return;\r\n    }\r\n    //Проверяем, что файл загружен\r\n    if (!req.file) {\r\n      res.status(400).json({ message: 'Изображение обязательно' });\r\n      return;\r\n    }\r\n\r\n    //добавлена проверка длины description → максимум 200 символов\r\n    const description: string = req.body.description || '';\r\n\r\n    // Ограничиваем описание 200 символами\r\n    if (description.length > 200) {\r\n      res\r\n        .status(400)\r\n        .json({ message: 'Описание не может превышать 200 символов' });\r\n      return;\r\n    }\r\n\r\n    // Загружаем фото в S3\r\n    const imageUrl = await uploadToS3(req.file, 'posts'); //Загружаем файл в S3 → получаем imageUrl\r\n\r\n    // author сохраняем как ObjectId (иначе TS ругается на string → ObjectId)\r\n    //Создаём новый Post\r\n    const newPost: IPost = new Post({\r\n      author: new Types.ObjectId(req.user.id),\r\n      image: imageUrl,\r\n      description: req.body.description || '',\r\n      // createdAt: new Date(),\r\n    });\r\n\r\n    await newPost.save(); //Сохраняем его в базе\r\n\r\n    //удалено за ненадобностью\r\n    // await User.findByIdAndUpdate(req.user.id, {\r\n    //   $push: { posts: newPost._id },\r\n    // }); //Дополнительно обновляем User: добавляем в массив posts ID нового поста\r\n\r\n    res.status(201).json(newPost);\r\n  } catch (err: unknown) {\r\n    const error = err as Error;\r\n    res\r\n      .status(500)\r\n      .json({ message: 'Ошибка при создании поста', error: error.message });\r\n  }\r\n};\r\n\r\n// // Создание поста с загрузкой фото в S3\r\n// export const createPost = async (req: RequestWithUser, res: Response) => {\r\n//   try {\r\n//     const userId = req.user?.id;\r\n//     if (!userId) return res.status(401).json({ message: \"Unauthorized\" });\r\n\r\n//     if (!req.file) return res.status(400).json({ message: \"Image required\" });\r\n\r\n//     const imageUrl = await uploadToS3(req.file, \"posts\");\r\n\r\n//     const user = await User.findById(userId);\r\n//     if (!user) return res.status(404).json({ message: \"User not found\" });\r\n\r\n//     const post = new Post({\r\n//       user_id: user._id,\r\n//       image_url: imageUrl,\r\n//       user_name: user.username,\r\n//       profileImage: user.profileImage,\r\n//       caption: req.body.caption,\r\n//       created_at: new Date(),\r\n//     });\r\n\r\n/*=================== Обновление поста =================================*/\r\nexport const updatePost = async (\r\n  req: RequestWithUser,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    if (!req.user?.id) {\r\n      res.status(401).json({ message: 'Неавторизованный пользователь' });\r\n      return;\r\n    }\r\n\r\n    // Проверка ID\r\n    if (!Types.ObjectId.isValid(req.params.id)) {\r\n      res.status(400).json({ message: 'Некорректный ID поста' });\r\n      return;\r\n    }\r\n\r\n    const post = await Post.findById(req.params.id);\r\n    if (!post) {\r\n      res.status(404).json({ message: 'Пост не найден' });\r\n      return;\r\n    }\r\n\r\n    //Проверяем, что текущий пользователь = автор поста\r\n    if (post.author.toString() !== req.user.id) {\r\n      res.status(403).json({ message: 'Нет прав для редактирования' });\r\n      return;\r\n    }\r\n\r\n    //Если есть новое описание → обновляем.\r\n    // if (req.body.description) post.description = req.body.description;\r\n\r\n    // проверка: если описание есть → ограничиваем 200 символов\r\n    if (req.body.description) {\r\n      if (req.body.description.length > 200) {\r\n        res\r\n          .status(400)\r\n          .json({ message: 'Описание поста не может превышать 200 символов' });\r\n        return;\r\n      }\r\n      post.description = req.body.description;\r\n    }\r\n\r\n    //Если загружено новое изображение → загружаем в S3 и меняем ссылку\r\n    if (req.file) {\r\n      const imageUrl = await uploadToS3(req.file, 'posts');\r\n      post.image = imageUrl;\r\n    }\r\n\r\n    await post.save();\r\n    res.json(post);\r\n  } catch (err: unknown) {\r\n    const error = err as Error;\r\n    res\r\n      .status(500)\r\n      .json({ message: 'Ошибка при обновлении поста', error: error.message });\r\n  }\r\n};\r\n\r\n/*===================== Удаление поста ====================================*/\r\nexport const deletePost = async (\r\n  req: RequestWithUser,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    if (!req.user?.id) {\r\n      res.status(401).json({ message: 'Неавторизованный пользователь' });\r\n      return;\r\n    }\r\n\r\n    // Проверка ID\r\n    if (!Types.ObjectId.isValid(req.params.id)) {\r\n      res.status(400).json({ message: 'Некорректный ID поста' });\r\n      return;\r\n    }\r\n\r\n    const post = await Post.findById(req.params.id);\r\n    if (!post) {\r\n      res.status(404).json({ message: 'Пост не найден' });\r\n      return;\r\n    }\r\n    //автор = текущий пользователь\r\n    if (post.author.toString() !== req.user.id) {\r\n      res.status(403).json({ message: 'Нет прав для удаления' });\r\n      return;\r\n    }\r\n\r\n    await post.deleteOne();\r\n    // await User.findByIdAndUpdate(req.user.id, { $pull: { posts: post._id } }); убрано. т.к.в UserModel нет массива posts\r\n\r\n    res.json({ message: 'Пост удалён' });\r\n  } catch (err: unknown) {\r\n    const error = err as Error;\r\n    res\r\n      .status(500)\r\n      .json({ message: 'Ошибка при удалении поста', error: error.message });\r\n  }\r\n};\r\n\r\n/*====================== Explore (случайные посты) =======================*/\r\nexport const explorePosts = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  try {\r\n    const postCount = await Post.countDocuments();\r\n    if (postCount === 0) {\r\n      res.json({ message: 'Нет постов для отображения' });\r\n      return;\r\n    }\r\n\r\n    const sampleSize = postCount < 10 ? postCount : 10;\r\n    //Выбираем случайно 10 постов($sample)\r\n\r\n    // ⚡️ Берём случайные посты через aggregate + джоин к User\r\n    // const posts = await Post.aggregate([\r\n    //   { $sample: { size: sampleSize } },\r\n    //   // { $sort: { createdAt: -1 } }, //добавлено\r\n    // ])\r\n    //   .lookup({\r\n    //     //подключаем данные о пользователях (авторах)\r\n    //     from: 'users',\r\n    //     localField: 'author',\r\n    //     foreignField: '_id',\r\n    //     as: 'author',\r\n    //   })\r\n    //   .unwind({ path: '$author', preserveNullAndEmptyArrays: true }) //разворачиваем массив авторов\r\n    //   .project({\r\n    //     //берём только нужные поля\r\n    //     image: 1,\r\n    //     description: 1,\r\n    //     createdAt: 1,\r\n    //     'author.username': 1,\r\n    //     'author.profileImage': 1,\r\n    //     likes: 1,\r\n    //     comments: 1,\r\n    //   });\r\n\r\n    //вариант\r\n    //   const posts = await Post.aggregate([\r\n    //   { $sample: { size: sampleSize } },\r\n    //   { $sort: { createdAt: -1 } },\r\n    // ]);\r\n\r\n    // res.json(posts);\r\n    // const sampleSize = Math.min(total, 10); // можно поменять на любое фиксированное число\r\n    const posts = await Post.aggregate([\r\n      { $sample: { size: sampleSize } },\r\n      { $project: { _id: 1, image: 1, createdAt: 1 } }, // только превью\r\n    ]);\r\n\r\n    res.json(posts);\r\n  } catch (err: unknown) {\r\n    const error = err as Error;\r\n    res\r\n      .status(500)\r\n      .json({ message: 'Ошибка при explore-постах', error: error.message });\r\n  }\r\n};\r\n"]}