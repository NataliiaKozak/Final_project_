{"version":3,"file":"s3.js","sourceRoot":"","sources":["../../../src/config/s3.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAChE,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,EAAE,IAAI,MAAM,EAAE,MAAM,MAAM,CAAC,CAAC,oCAAoC;AACzE,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,MAAM,CAAC,MAAM,EAAE,CAAC;AAEhB,MAAM,EAAE,GAAG,IAAI,QAAQ,CAAC;IACtB,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,UAAW;IAC/B,WAAW,EAAE;QACX,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,iBAAkB;QAC3C,eAAe,EAAE,OAAO,CAAC,GAAG,CAAC,qBAAsB;KACpD;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAAE,IAAyB,EAAE,MAAc,EAAE,EAAE;IAC5E,IAAI,CAAC,IAAI,EAAE,CAAC;QACV,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;IACtC,CAAC;IACD,4CAA4C;IAC5C,MAAM,cAAc,GAAG,MAAM,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;QAC7C,uCAAuC;SACtC,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAE,CAAC,CAAC,mCAAmC;SACrF,IAAI,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC,sCAAsC;SAC5D,QAAQ,EAAE,CAAC;IAEd,uDAAuD;IACvD,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,cAAe,CAAC;IAC3C,4DAA4D;IAC5D,MAAM,GAAG,GAAG,GAAG,MAAM,IAAI,MAAM,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,iBAAiB;IAEhG,MAAM,OAAO,GAAG,IAAI,gBAAgB,CAAC;QACnC,uCAAuC;QACvC,MAAM,EAAE,MAAM;QACd,GAAG,EAAE,GAAG;QACR,qBAAqB;QACrB,IAAI,EAAE,cAAc,EAAE,8BAA8B;QACpD,8BAA8B;QAC9B,WAAW,EAAE,YAAY;QACzB,oHAAoH;QACpH,YAAY,EAAE,qCAAqC,EAAE,kCAAkC;KACxF,CAAC,CAAC;IAEH,MAAM,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAEvB,OAAO,WAAW,MAAM,OAAO,OAAO,CAAC,GAAG,CAAC,UAAU,kBAAkB,GAAG,EAAE,CAAC;AAC/E,CAAC,CAAC","sourcesContent":["import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';\r\nimport dotenv from 'dotenv';\r\nimport { v4 as uuidv4 } from 'uuid'; //случайный уникальный идентификатор\r\nimport sharp from 'sharp';\r\n\r\ndotenv.config();\r\n\r\nconst s3 = new S3Client({\r\n  region: process.env.AWS_REGION!,\r\n  credentials: {\r\n    accessKeyId: process.env.AWS_ACCESS_KEY_ID!,\r\n    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY!,\r\n  },\r\n});\r\n\r\nexport const uploadToS3 = async (file: Express.Multer.File, folder: string) => {\r\n  if (!file) {\r\n    throw new Error('Файл отсутствует');\r\n  }\r\n  //  обрабатываем изображение перед загрузкой\r\n  const processedImage = await sharp(file.buffer)\r\n    // .resize(1080) // ширина макс. 1080px\r\n    .resize({ width: 1080, withoutEnlargement: true }) // не увеличиваем, если фото меньше\r\n    .jpeg({ quality: 80 }) // конвертируем в JPEG с 80% качеством\r\n    .toBuffer();\r\n\r\n  //добавлено при проверке в постман из-за проблем с фото\r\n  const bucket = process.env.S3_BUCKET_NAME!;\r\n  // const key = `${folder}/${uuidv4()}-${file.originalname}`;\r\n  const key = `${folder}/${uuidv4()}-${file.originalname.replace(/\\s+/g, '_')}`; //убирает пробелы\r\n\r\n  const command = new PutObjectCommand({\r\n    // Bucket: process.env.S3_BUCKET_NAME!,\r\n    Bucket: bucket,\r\n    Key: key,\r\n    // Body: file.buffer,\r\n    Body: processedImage, // загружаем обработанный файл\r\n    // ContentType: file.mimetype,\r\n    ContentType: 'image/jpeg',\r\n    // ACL: 'public-read', //чтобы файл был доступен по URL/можно убрать и настроить bucket policy/убрано из-за проверки\r\n    CacheControl: 'public, max-age=31536000, immutable', //добавлено при проверке в постман\r\n  });\r\n\r\n  await s3.send(command);\r\n\r\n  return `https://${bucket}.s3.${process.env.AWS_REGION}.amazonaws.com/${key}`;\r\n};\r\n"]}