{"version":3,"file":"server.js","sourceRoot":"","sources":["../server.ts"],"names":[],"mappings":"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","sourcesContent":["// import express from 'express';\r\n// import dotenv from 'dotenv';\r\n// import app from './app.js'; // Express app\r\n// import connectDB from './src/config/db.js';\r\n\r\n// dotenv.config();\r\n\r\n// const PORT: number | string = process.env.PORT || 3000;\r\n\r\n// // app.listen(PORT, async () => {\r\n// //   try {\r\n// //     await connectDB();\r\n// //     console.log(`Server running on http://localhost:${PORT}`);\r\n// //   } catch (err) {\r\n// //     console.error('Error connecting server', err);\r\n// //   }\r\n// // });\r\n\r\n// connectDB()\r\n//   .then(() => {\r\n//     // Стартуем сервер ТОЛЬКО после успешного подключения\r\n//     app.listen(PORT, () => {\r\n//       console.log(`Server running on http://localhost:${PORT}`);\r\n//     });\r\n//   })\r\n//   .catch((err) => {\r\n//     console.error('DB connection failed:', err);\r\n//     process.exit(1); // чтобы процесс не висел без БД\r\n//   });\r\n\r\n// сокет\r\nimport http from 'http';\r\nimport dotenv from 'dotenv';\r\nimport { Server } from 'socket.io';\r\nimport app from './app';\r\nimport connectDB from './src/config/db';\r\nimport { verifySocketToken } from './src/config/jwt';\r\nimport Message from './src/models/MessageModel';\r\n\r\ndotenv.config();\r\n\r\nconst PORT: number = Number(process.env.PORT) || 3000;\r\n\r\n// создаём http сервер поверх Express\r\nconst server = http.createServer(app);\r\n\r\n// подключаем Socket.IO\r\nconst io = new Server(server, {\r\n  cors: {\r\n    origin: process.env.CLIENT_URL || 'http://localhost:5173',\r\n    credentials: true,\r\n  },\r\n  //   transports: ['websocket', 'polling'],\r\n});\r\n\r\n// Middleware для аутентификации сокетов через JWT\r\nio.use((socket, next) => {\r\n  try {\r\n    const token = socket.handshake.auth.token;\r\n    if (!token) return next(new Error('No token'));\r\n\r\n    const decoded = verifySocketToken(token);\r\n    if (!decoded) return next(new Error('Invalid token'));\r\n\r\n    socket.data.userId = decoded.user_id;\r\n    next();\r\n  } catch (err) {\r\n    next(new Error('Unauthorized'));\r\n  }\r\n});\r\n\r\n// socket-события\r\nio.on('connection', (socket) => {\r\n  console.log(' User connected:', socket.data.userId);\r\n\r\n  // подключение к комнате (1:1)\r\n  socket.on('joinRoom', ({ targetUserId }) => {\r\n    const userId = socket.data.userId;\r\n    const roomId = [userId, targetUserId].sort().join('_');\r\n    socket.join(roomId);\r\n    console.log(`User ${userId} joined room ${roomId}`);\r\n  });\r\n\r\n  // отправка сообщения\r\n  socket.on('sendMessage', async ({ targetUserId, text }) => {\r\n    try {\r\n      const senderId = socket.data.userId;\r\n      const roomId = [senderId, targetUserId].sort().join('_');\r\n\r\n      // сохраняем сообщение в MongoDB\r\n      const message = new Message({\r\n        sender: senderId,\r\n        recipient: targetUserId,\r\n        text,\r\n      });\r\n      await message.save();\r\n\r\n      // отправляем всем в комнате\r\n      io.to(roomId).emit('receiveMessage', {\r\n        _id: message._id,\r\n        sender: senderId,\r\n        recipient: targetUserId,\r\n        text: message.text,\r\n        createdAt: message.createdAt,\r\n      });\r\n    } catch (err) {\r\n      console.error('Ошибка при отправке сообщения:', err);\r\n      socket.emit('error', { message: 'Не удалось отправить сообщение' });\r\n    }\r\n  });\r\n\r\n  // отключение\r\n  socket.on('disconnect', () => {\r\n    console.log(' User disconnected:', socket.data.userId);\r\n  });\r\n});\r\n\r\n// подключение к базе и запуск сервера\r\n(async () => {\r\n  try {\r\n    await connectDB(); // MongoDB Atlas\r\n    server.listen(PORT, () => {\r\n      console.log(` Server running on http://localhost:${PORT}`);\r\n    });\r\n  } catch (err) {\r\n    console.error(' Error starting server:', err);\r\n    process.exit(1);\r\n  }\r\n})();\r\n"]}