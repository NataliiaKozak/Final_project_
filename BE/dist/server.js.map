{"version":3,"file":"server.js","sourceRoot":"","sources":["../server.ts"],"names":[],"mappings":"AACA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAC5B,OAAO,GAAG,MAAM,UAAU,CAAC,CAAC,cAAc;AAC1C,OAAO,SAAS,MAAM,oBAAoB,CAAC;AAE3C,MAAM,CAAC,MAAM,EAAE,CAAC;AAEhB,MAAM,IAAI,GAAoB,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;AAEvD,iCAAiC;AACjC,UAAU;AACV,yBAAyB;AACzB,iEAAiE;AACjE,oBAAoB;AACpB,qDAAqD;AACrD,MAAM;AACN,MAAM;AAEN,SAAS,EAAE;KACR,IAAI,CAAC,GAAG,EAAE;IACT,qDAAqD;IACrD,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;QACpB,OAAO,CAAC,GAAG,CAAC,sCAAsC,IAAI,EAAE,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;KACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;IACb,OAAO,CAAC,KAAK,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAAC;IAC5C,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,gCAAgC;AACnD,CAAC,CAAC,CAAC;AAEL,QAAQ;AACR,2BAA2B;AAC3B,+BAA+B;AAC/B,sCAAsC;AACtC,2BAA2B;AAC3B,2CAA2C;AAC3C,wDAAwD;AACxD,mDAAmD;AAEnD,mBAAmB;AAEnB,yDAAyD;AAEzD,wCAAwC;AACxC,yCAAyC;AAEzC,0BAA0B;AAC1B,kCAAkC;AAClC,YAAY;AACZ,iEAAiE;AACjE,yBAAyB;AACzB,OAAO;AACP,+CAA+C;AAC/C,MAAM;AAEN,qDAAqD;AACrD,6BAA6B;AAC7B,UAAU;AACV,iDAAiD;AACjD,sDAAsD;AAEtD,gDAAgD;AAChD,6DAA6D;AAE7D,4CAA4C;AAC5C,cAAc;AACd,oBAAoB;AACpB,uCAAuC;AACvC,MAAM;AACN,MAAM;AAEN,oBAAoB;AACpB,oCAAoC;AACpC,yDAAyD;AAEzD,mCAAmC;AACnC,kDAAkD;AAClD,yCAAyC;AACzC,8DAA8D;AAC9D,2BAA2B;AAC3B,2DAA2D;AAC3D,QAAQ;AAER,0BAA0B;AAC1B,iEAAiE;AACjE,YAAY;AACZ,6CAA6C;AAC7C,kEAAkE;AAElE,yCAAyC;AACzC,sCAAsC;AACtC,4BAA4B;AAC5B,mCAAmC;AACnC,gBAAgB;AAChB,YAAY;AACZ,8BAA8B;AAE9B,qCAAqC;AACrC,+CAA+C;AAC/C,4BAA4B;AAC5B,4BAA4B;AAC5B,mCAAmC;AACnC,8BAA8B;AAC9B,wCAAwC;AACxC,YAAY;AACZ,sBAAsB;AACtB,8DAA8D;AAC9D,6EAA6E;AAC7E,QAAQ;AACR,QAAQ;AAER,kBAAkB;AAClB,oCAAoC;AACpC,8DAA8D;AAC9D,QAAQ;AACR,MAAM;AAEN,yCAAyC;AACzC,iBAAiB;AACjB,UAAU;AACV,0CAA0C;AAC1C,kCAAkC;AAClC,oEAAoE;AACpE,UAAU;AACV,oBAAoB;AACpB,qDAAqD;AACrD,uBAAuB;AACvB,MAAM;AACN,QAAQ","sourcesContent":["import express from 'express';\r\nimport dotenv from 'dotenv';\r\nimport app from './app.js'; // Express app\r\nimport connectDB from './src/config/db.js';\r\n\r\ndotenv.config();\r\n\r\nconst PORT: number | string = process.env.PORT || 3000;\r\n\r\n// app.listen(PORT, async () => {\r\n//   try {\r\n//     await connectDB();\r\n//     console.log(`Server running on http://localhost:${PORT}`);\r\n//   } catch (err) {\r\n//     console.error('Error connecting server', err);\r\n//   }\r\n// });\r\n\r\nconnectDB()\r\n  .then(() => {\r\n    // Стартуем сервер ТОЛЬКО после успешного подключения\r\n    app.listen(PORT, () => {\r\n      console.log(`Server running on http://localhost:${PORT}`);\r\n    });\r\n  })\r\n  .catch((err) => {\r\n    console.error('DB connection failed:', err);\r\n    process.exit(1); // чтобы процесс не висел без БД\r\n  });\r\n\r\n// сокет\r\n// import http from 'http';\r\n// import dotenv from 'dotenv';\r\n// import { Server } from 'socket.io';\r\n// import app from './app';\r\n// import connectDB from './src/config/db';\r\n// import { verifySocketToken } from './src/config/jwt';\r\n// import Message from './src/models/MessageModel';\r\n\r\n// dotenv.config();\r\n\r\n// const PORT: number = Number(process.env.PORT) || 3000;\r\n\r\n// // создаём http сервер поверх Express\r\n// const server = http.createServer(app);\r\n\r\n// // подключаем Socket.IO\r\n// const io = new Server(server, {\r\n//   cors: {\r\n//     origin: process.env.CLIENT_URL || 'http://localhost:5173',\r\n//     credentials: true,\r\n//   },\r\n//   //   transports: ['websocket', 'polling'],\r\n// });\r\n\r\n// // Middleware для аутентификации сокетов через JWT\r\n// io.use((socket, next) => {\r\n//   try {\r\n//     const token = socket.handshake.auth.token;\r\n//     if (!token) return next(new Error('No token'));\r\n\r\n//     const decoded = verifySocketToken(token);\r\n//     if (!decoded) return next(new Error('Invalid token'));\r\n\r\n//     socket.data.userId = decoded.user_id;\r\n//     next();\r\n//   } catch (err) {\r\n//     next(new Error('Unauthorized'));\r\n//   }\r\n// });\r\n\r\n// // socket-события\r\n// io.on('connection', (socket) => {\r\n//   console.log(' User connected:', socket.data.userId);\r\n\r\n//   // подключение к комнате (1:1)\r\n//   socket.on('joinRoom', ({ targetUserId }) => {\r\n//     const userId = socket.data.userId;\r\n//     const roomId = [userId, targetUserId].sort().join('_');\r\n//     socket.join(roomId);\r\n//     console.log(`User ${userId} joined room ${roomId}`);\r\n//   });\r\n\r\n//   // отправка сообщения\r\n//   socket.on('sendMessage', async ({ targetUserId, text }) => {\r\n//     try {\r\n//       const senderId = socket.data.userId;\r\n//       const roomId = [senderId, targetUserId].sort().join('_');\r\n\r\n//       // сохраняем сообщение в MongoDB\r\n//       const message = new Message({\r\n//         sender: senderId,\r\n//         recipient: targetUserId,\r\n//         text,\r\n//       });\r\n//       await message.save();\r\n\r\n//       // отправляем всем в комнате\r\n//       io.to(roomId).emit('receiveMessage', {\r\n//         _id: message._id,\r\n//         sender: senderId,\r\n//         recipient: targetUserId,\r\n//         text: message.text,\r\n//         createdAt: message.createdAt,\r\n//       });\r\n//     } catch (err) {\r\n//       console.error('Ошибка при отправке сообщения:', err);\r\n//       socket.emit('error', { message: 'Не удалось отправить сообщение' });\r\n//     }\r\n//   });\r\n\r\n//   // отключение\r\n//   socket.on('disconnect', () => {\r\n//     console.log(' User disconnected:', socket.data.userId);\r\n//   });\r\n// });\r\n\r\n// // подключение к базе и запуск сервера\r\n// (async () => {\r\n//   try {\r\n//     await connectDB(); // MongoDB Atlas\r\n//     server.listen(PORT, () => {\r\n//       console.log(` Server running on http://localhost:${PORT}`);\r\n//     });\r\n//   } catch (err) {\r\n//     console.error(' Error starting server:', err);\r\n//     process.exit(1);\r\n//   }\r\n// })();\r\n"]}